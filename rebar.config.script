%%% vim: ft=erlang

PredefinedRepoUrl = "https://github.com/koctep/rebar-script.git",

RebarScriptRepoUrl
= case os:getenv("REBAR_SCRIPT_REPO") of
    Repo when Repo =/= false andalso Repo =/= [] -> Repo;
    _ ->
      case lists:keyfind(rebar_script_repo, 1, CONFIG) of
        {rebar_script_repo, RSConfigRepo} -> RSConfigRepo;
        _ -> PredefinedRepoUrl
      end
  end,

RebarScriptRepo = {'rebar-script', "", {git, RebarScriptRepoUrl, "HEAD"}, [raw]},

PrintMsg
= fun(Msg, Args) ->
      io:format(Msg ++ "~n", Args)
  end.

DebugMsg
= case os:getenv("REBAR_SCRIPT_DEBUG") of
    false -> fun(_, _) -> ok end;
    _     -> fun(Msg, Args) -> PrintMsg("*DEBUG* " ++ Msg, Args) end
  end,

WarningMsg
= fun(Msg, Args) ->
      PrintMsg("\n\n\t\t**** WARNING ****\n" ++ Msg ++ "\n\t\t*****************\n\n", Args)
  end,

DebugMsg("getting script name and fetch possibility", []),
{Script, CanFetch}
= case os:getenv("REBAR_SCRIPT") of
    RS when RS =/= false andalso RS =/= [] ->
      DebugMsg("rebar script is defined in env var", []),
      {RS, false};
    _ ->
      DebugMsg("env var is not setted", []),
      CurDir = filename:absname(""),
      DebugMsg("current dir is ~p", [CurDir]),
      DepsDir
      = case lists:keyfind(deps_dir, 1, CONFIG) of
          {deps_dir, Val} ->
            Val;
          _ -> "deps"
        end,
      DebugMsg("deps dir: ~p", [DepsDir]),
      {RS, CF}
      = case DepsDir of
          [$/, _] -> {DepsDir ++ "/rebar.script", false};
          _ -> {CurDir ++ "/" ++ DepsDir ++ "/rebar-script/rebar.script", true}
        end,
      os:putenv("REBAR_SCRIPT", RS),
      {RS, CF}
  end,

DebugMsg("getting new config", []),
NewConfig
= case filelib:is_regular(Script) of
    true ->
      DebugMsg("script is exists", []),
      %% from rebar_config:bs/1
      Bindings
      = lists:foldl(
          fun({K, V}, Bs) ->
              erl_eval:add_binding(K, V, Bs)
          end,
          erl_eval:new_bindings(),
          [{'CONFIG', CONFIG}, {'SCRIPT', SCRIPT}]
         ),
      DebugMsg("updating config using script file ~p", [Script]),
      {ok, NC} = file:script(Script, Bindings),
      NC;
    false ->
      DebugMsg("script is not exists", []),
      case CanFetch of
        false ->
          WarningMsg(
            "rebar script is not exists\n"
            "It may be fetched as dependency\n"
            "but you should unset REBAR_SCRIPT"
            " environment variable or set it empty", []),
          DebugMsg("returning empty config to prevent downloading deps", []),
          [];
        true ->
          WarningMsg(
            "rebar script is not exists\n"
            "it will be fetched now, but deps will not be downloaded\n"
            "you should run `rebar get-deps` again", []),
          case lists:keyfind(deps, 1, CONFIG) of
            {deps, _} ->
              lists:keyreplace(deps, 1, CONFIG, {deps, [RebarScriptRepo]});
            _ ->
              [{deps, [RebarScriptRepo]} | CONFIG]
          end
      end
  end,

DebugMsg("new config: ~n~p", [NewConfig]),

NewConfig.
